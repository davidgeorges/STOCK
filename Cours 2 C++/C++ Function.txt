Function :

il y a des fonctions sans paramètre

protoype au debut : type nomf(type variable1);

fonction complete : type nomf(type variable1)
		{
			instruction;
		}

appel fonction : nomf(variable);


------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------Function Overloading--------------------------------------------------------

Deux fonction du même nom si les type de fonction/arguments

Exemple : 

// function avec comme paramètre et retour float
float absolute(float var){
    if (var < 0.0)
        var = -var;
    return var;
}

// function avec comme paramètre et retour int
int absolute(int var) {
     if (var < 0)
         var = -var;
    return var;
}

lors de l'appel : absolute(-5); pour la fonction int , absolute(5.5f) pour la fonction flaot , choisis automatiquement	

------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------Function avec paramètre par defaut------------------------------------------

// defining the default arguments
void display(char = '*', int = 3);

int main() {
    int count = 5;

    cout << "No argument passed: ";
    // *, 3 will be parameters
    display(); 
    
    cout << "First argument passed: ";
     // #, 3 will be parameters
    display('#'); 
    
    cout << "Both arguments passed: ";
    // $, 5 will be parameters
    display('$', count); 

    return 0;
}

void display(char c, int count) {
    for(int i = 1; i <= count; ++i)
    {
        cout << c;
    }
    cout << endl;
}

------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------Storage class----------------------------------------------------------


Local variable = variable utilisable seulement dans la fonction ou elle est declarer

Global variable = variable declarer hors de toute fonction peut être utiliser et changer partout dans le programme

Static Local variable = varible static existe seulement dans la fonctionne ou elle est declarer mais  contrairement a celle de base elle reste jusqu'a	 la fin du programme

Register varible = ?

Thread local storage = 	Thread-local storage is a mechanism by which variables are allocated such that there is one instance of the variable per extant thread.

------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------Recursivite------------------------------------------------------------

Fonction qui s'appelle elle meme 

Exemple : int a(int x)
	{
		if(x<=3)
		{
			a(x); // s'appelle tant que x plus petit ou egale a 3
			x++; // fait une boucle avec le reste
		}
		else
		{
			return x;
		}
	}

------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------Fonction qui return une reference--------------------------------------------

// Global variable
int num;

// Function declaration
int& test();

int main()
{
    test() = 5; // 

    cout << num;

    return 0;
}

int& test()
{
    return num; // return une reference de num , quand la valeur est return on peut l'assigner une valeur comme test() = 5 et ça met 5 dans num
}

( test() = 5  et num = test() )

------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------Polymorphism--------------------------------------------------------

Une fonction qui a le même nom mais plusieurs forme.
Exemple : 
// C++ program to overload sum() function

#include <iostream>
using namespace std;

// Function with 2 int parameters
int sum(int num1, int num2) {
    return num1 + num2;
}

// Function with 2 double parameters
double sum(double num1, double num2) {
    return num1 + num2;
}

// Function with 3 int parameters
int sum(int num1, int num2, int num3) {
    return num1 + num2 + num3;
}

int main() {
    // Call function with 2 int parameters
    cout << "Sum 1 = " << sum(5, 6) << endl; // appel a int sum 2 parametre

    // Call function with 2 double parameters
    cout << "Sum 2 = " << sum(5.5, 6.6) << endl; // appel  a double 

    // Call function with 3 int parameters
    cout << "Sum 3 = " << sum(5, 6, 7) << endl; // appel a int sum 3 parametre

    return 0;
}

