Declaration :
 
string *pointeurC{0};
//Un pointeur qui peut contenir l'adresse d'une chaîne de caractères

vector<int> *pointeurD{0};
//Un pointeur qui peut contenir l'adresse d'un tableau dynamique de nombres entiers
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------POINTEUR STANTARD-------------------------------------------------------------
Declaration :

int ageUtilisateur{16};
int *ptr{0};
ptr = &ageUtilisateur;
cout << "La valeur est :  " << *ptr << endl; // ptr = adresse de ageUtilisateur et *ptr la valeur pointée ( donc 16 ici )

----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------POINTEUR STANTARD-------------------------------------------------------------
Declaration : Pointeur

int *pointeur{0};
pointeur = new int;

*pointeur = 2;  //On accède à la case mémoire pour en modifier la valeur
delete pointeur;  //On libère la case mémoire
pointeur = 0; ou pointeur = nullptr;      //Et de faire pointer le pointeur vers rien

Si vous changez la valeur du pointeur directement, vous perdez le seul moyen d'accéder à cette case mémoire.

----------------------------------------------------------------------------------------------------------------------------
------------------------------------------------POINTEUR INTELLIGENT---------------------------------------------------------

unique_ptr = pointeur unique
shared_ptr = pointeur partager
week_ptr = poiteur qui vérifie que notre ressource existe et si c'est le cas on pourra en faire un shared_ptr

Détruit a la fin de la fonction et Libère la mémoire automatiquement

Declaration : std::unique_ptr<type> nom{std::make_unique<type>(valeur)};

Exemple : std::unique_ptr<int> pNombre{std::make_unique<int>(16)}; ou auto pNombre{std::make_unique<int>(16)};

en shared std::shared_ptr<int> pNombre{std::make_shared<int>(16)};

tableau dynamique avec pointeur intelligent : auto tab{std::make_unique<int[]>(16)};

