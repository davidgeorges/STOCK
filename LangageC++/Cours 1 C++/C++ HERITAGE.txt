Il y a héritage quand on peut dire : « A est un B ».
La classe B hérite des attributs et methode de la classe A , mais la classe A n'hérite pas des attributs et méthodes de la classe B
Ex : une voiture est un véhicule (Voiturehérite deVehicule)
un bus est un véhicule (Bushérite deVehicule)... , un GUERRIER est un PERSONNAGE , un MAGICIEN est un PERSONNAGE.

Ex : class Guerrier : public Personnage // Signifie : créer une classe Guerrier qui hérite de la classe Personnage/
On peut rajouter des attributs et des méthodes spéciales dans la classeGuerrier et qui ne concerne seulement la class Guerrier

On peut substituer un objet de la classe fille à un pointeur ou une référence vers un objet de la classe mère. 
== Personnage *monPersonnage(0); // pointeur de type personne initialiser  a 0
   Guerrier *monGuerrier = new Guerrier(); // pointeur guerrier initialiser avec un objet de type guerrier
   monPersonnage = monGuerrier; // 
   mère = fille // nous prenons seulement les methodes et attributs hérités.

on peut affecter un élément enfant à un élément parent , car guerrier est un personnage, mais pas l'inverse.
-----------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------

HERITAGE ET CONSTRUCTEURS : 

Ex : Magicien::Magicien() : Personnage(), m_mana(100)
{
}

1 : Vous demandez à créer un objet de typeMagicien.

2 : Le compilateur appelle d'abord le constructeur de la classe mère (Personnage).

3 : Puis, le compilateur appelle le constructeur de la classe fille (Magicien).

-----------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------

Le gros avantage c'est que l'ont peut transmettre les paramètres du constructeur de Magicien au constructeur de Personnage.

Ex : Magicien::Magicien(string nom) : Personnage(nom), m_mana(100)
{
}

Bien entendu, si on veut que cela marche, il faut aussi surcharger le constructeur dePersonnagepour qu'il accepte un paramètre string.

Ex: Personnage::Personnage(string nom) : m_vie(100), m_nom(nom)
{
}

-----------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------

LA PORTEE PROTECTED :
les attributs en protected c'est interdire l'utilisation en dehors de la classe ( comme private ) sauf pour les classe héritière (classe fille)
( mieux de toujours mettre en proteced tout les attributs ).

-----------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------

LE MASQUAGE :
on a une methodes dans la classe personnage sePresenter(), et dans la classe guerrier on veut aussi une méthodes mais avec un texte en plus.

on va prendre le même nom dans la classe guerrier sePresenter() et mettre un texte en plus.
donc personnage.sePresenter() et guerrier.sePresenter() sont différent

Quand on écrit une fonction qui a le même nom que celle héritée de la classe mère, on parle de masquage.
La fonction héritée de Personnage est masquée, cachée.

et pour appeller la fonction personnage.sePresenter() dans la classe guerrier on parle de DEMASQUAGE il faut faire : 

Personnage::sePresenter();





